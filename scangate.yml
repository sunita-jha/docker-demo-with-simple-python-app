trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - pipelines/*
    - test/*
    - README.md
    - .dockerignore
    - .gitignore
 
pool:
  vmImage: "ubuntu-latest"

variables:
  - name: registryName
    value: 'myregistrydemo1'
  - name: imageName
    value: 'scangate'
  - name: azureSubscription
    value: 'Free Trial (7efefb00-e17c-4d85-a4ce-d13264a86786)'
  - name: tag
    value: '$(Build.BuildId)'
  - name: waitForScanResultsAfterPushInMinutes
    value: '2'
  # - name: dockerfilePath
  #   value: '$(Build.SourcesDirectory)/Dockerfile'

stages:
- stage: Build_and_Publish
  displayName: Build and push image to registry than check for vulnerability scan results to determine publishing health
  jobs:
  - job: BuildAndPush
    displayName: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: AZ ACR Login
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az acr login --name $(registryName)'
    - task: AzureCLI@2
      displayName: AZ ACR Build
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az acr build -t $(imageName):$(tag) -t $(imageName):latest -r $(registryName) -f Dockerfile .'
        useGlobalConfig: true
        workingDirectory: '$(Build.SourcesDirectory)'

  - job: WaitForScanResults
    displayName: Wait for scan results
    pool: 'Server'
    dependsOn: 
    - BuildAndPush
    steps:
    - task: Delay@1
      inputs:
        delayForMinutes: '$(waitForScanResultsAfterPushInMinutes)'

  - job: ImageScanCheck
    displayName: Check for image vulnerabilities
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: 
    - BuildAndPush
    - WaitForScanResults
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: $(azureSubscription)
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.SourcesDirectory)/acr-image-scan.ps1'
          arguments: '-registryName $(registryName) -repository $(imageName) -tag $(tag)'
